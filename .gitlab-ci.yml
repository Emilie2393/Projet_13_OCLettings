stages:
  - lint
  - test
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip_cache"
  PYTHONPATH: "$CI_PROJECT_DIR"
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: emilie2393/oc_lettings
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip_cache"
  PYTHONPATH: "$CI_PROJECT_DIR"
  CONTAINER_NAME: oc_lettings_site
  RENDER_HOOK: "https://api.render.com/deploy/srv-cuqb62lds78s739ak1g0?key=wrz_P66XA-E"


cache:
  paths:
    - .pip_cache/

linting:
  stage: lint
  image: python:3.9
  before_script:
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  script:
    - flake8
  allow_failure: false

tests:
  stage: test
  image: python:3.9
  before_script:
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  script:
    - pytest --cov=oc_lettings_site --cov-report=term-missing --cov-fail-under=80
  coverage: '/^TOTAL.*\s+(\d+)%/'
  allow_failure: false

build_docker_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "Authentification sur Docker Hub"
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - echo "Construction de l'image Docker"
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker tag $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA $DOCKER_IMAGE:latest
    - echo "Pousser l'image sur Docker Hub"
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $DOCKER_IMAGE:latest
  only:
    - main
  artifacts:
    paths:
      - Dockerfile

deploy_to_render:
  stage: deploy
  image: curlimages/curl:latest
  script:
    - echo "D√©clenchement du d√©ploiement sur Render..."
    - apk add --no-cache jq  # Installation de jq (n√©cessaire pour traiter la r√©ponse JSON)
    
    # D√©clencher le d√©ploiement sur Render
    - |
      DEPLOY_RESPONSE=$(curl -s -X POST "$RENDER_HOOK" -H "Accept: application/json")
      echo "R√©ponse Render: $DEPLOY_RESPONSE"

      DEPLOY_ID=$(echo $DEPLOY_RESPONSE | jq -r '.id')

      if [[ "$DEPLOY_ID" == "null" || -z "$DEPLOY_ID" ]]; then
        echo "üö® Erreur : Impossible d'obtenir l'ID du d√©ploiement"
        exit 1
      fi

      echo "D√©ploiement en cours avec ID: $DEPLOY_ID"

    # V√©rifier le statut du d√©ploiement
    - echo "V√©rification du statut du d√©ploiement..."
    - |
      STATUS="in_progress"
      while [[ "$STATUS" == "in_progress" || "$STATUS" == "queued" ]]; do
        sleep 10  # Attendre 10 secondes avant de rev√©rifier
        STATUS=$(curl -s -X GET "https://api.render.com/v1/deploys/$DEPLOY_ID" -H "Accept: application/json" | jq -r '.status')
        echo "Statut actuel: $STATUS"
      done

    # V√©rification finale du statut
    - |
      if [[ "$STATUS" != "live" ]]; then
        echo "üö® Le d√©ploiement a √©chou√© !"
        exit 1
      else
        echo "‚úÖ D√©ploiement r√©ussi !"
      fi
  only:
    - main



