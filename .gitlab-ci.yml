stages:
  - lint
  - test
  - build
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip_cache"
  PYTHONPATH: "$CI_PROJECT_DIR"
  DOCKER_REGISTRY: docker.io
  DOCKER_IMAGE: emilie2393/oc_lettings
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.pip_cache"
  PYTHONPATH: "$CI_PROJECT_DIR"
  CONTAINER_NAME: oc_lettings_site
  RENDER_HOOK: "https://api.render.com/deploy/srv-curf0cqj1k6c73arlh0g?key=BupwfnXLcY4"


cache:
  paths:
    - .pip_cache/

linting:
  stage: lint
  image: python:3.9
  before_script:
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  script:
    - flake8
  allow_failure: false

tests:
  stage: test
  image: python:3.9
  before_script:
  - python3 -m venv venv
  - source venv/bin/activate
  - pip install -r requirements.txt
  script:
    - pytest --cov=oc_lettings_site --cov-report=term-missing --cov-fail-under=80
  coverage: '/^TOTAL.*\s+(\d+)%/'
  allow_failure: false

build_docker_image:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: ""
  script:
    - echo "Authentification sur Docker Hub"
    - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
    - echo "Construction de l'image Docker"
    - docker build -t $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA .
    - echo "Pousser l'image sur Docker Hub"
    - docker push $DOCKER_IMAGE:$CI_COMMIT_SHORT_SHA
  only:
    - main
  artifacts:
    paths:
      - Dockerfile

# deploy_to_render:
#   stage: deploy
#   image: alpine:latest
#   script:
#     - apk --no-cache add curl jq
#     - export IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
#     - echo "Déclenchement du déploiement sur Render..."
#     - |
#       curl -s -X POST "$RENDER_HOOK" \
#         -H "Accept: application/json" \
#         -d "{\"clearCache\": false, \"image\": \"docker.io/emilie2393/oc_lettings:$IMAGE_TAG\"}"
#   only:
#     - main











